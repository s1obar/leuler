package com.example.first100;

import com.example.helper.Helper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

/**
     The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

     Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
     10: 1,2,5,10
     15: 1,3,5,15
     21: 1,3,7,21
     28: 1,2,4,7,14,28
     We can see that 28 is the first triangle number to have over five divisors.

     What is the value of the first triangle number to have over five hundred divisors?
**/
@Slf4j
@RequiredArgsConstructor
@Component
public class E_12 {

    private final Helper helper;

    public String solution1(){

        int index = 1;
        int triangular = 0;
        List<Integer> indexes = new ArrayList<>();
        boolean found = false;

        int divisorCount = 0;
        while(!found){
            indexes.add(index);
            if(isIndexTriangular(index)){
                triangular = index;
            }
            for (int num : indexes) {
                if(triangular % num == 0){
                    divisorCount++;
                    if(divisorCount > 500){
                        found = true;
                    }
                }
            }

            if(!found){
                divisorCount = 0;
            }
            index++;
        }

        log.info("First triangle number to have over five hundred divisors is: {}", triangular);

        return  getMethodName();
    }

    static boolean isIndexTriangular(int num)
    {
        // Base case
        if (num < 0)
            return false;

        // A Triangular number must be
        // sum of first n natural numbers
        int sum = 0;

        for (int n = 1; sum <= num; n++)
        {
            sum = sum + n;
            if (sum == num)
                return true;
        }

        return false;
    }

    private String getMethodName(){
        return helper.getMethodName(E_12.class,0);
    }
}
