package com.example.first100;

import com.example.helper.Helper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
**/

@Slf4j
@Component
@RequiredArgsConstructor
public class E_2 {
    private final Helper helper;
    private static final int FOUR_MILLION = 4000000;
    public String solution1(){
        List<Integer> fibonacciList = new ArrayList<>();
        int first = 0;
        int second = 1;
        fibonacciList.add(first);
        fibonacciList.add(second);
        while(first + second < FOUR_MILLION){
            int next = first + second;
            first = second;
            second = next;

            fibonacciList.add(next);
        }

        int sum = fibonacciList.stream().filter(num -> num % 2 == 0).mapToInt(Integer::intValue).sum();

        log.info("Fibonacci: {}", fibonacciList);
        log.info("Sum of even numbers: {}", sum);
        return getMethodName();
    }

    public String solution2(){
        int first = 0;
        int second = 1;
        int sum = 0;
        while(first + second < FOUR_MILLION){
            int next = first + second;
            first = second;
            second = next;

            if(next % 2 == 0){
                sum += next;
            }
        }

        log.info("Sum of even numbers: {}", sum);
        return getMethodName();
    }

    public String solution3(){
        int sum = 0;
        int index = 0;
         while(fibRecursion(index) < FOUR_MILLION){
             int fibNum = fibRecursion(index);
             if(fibNum % 2 == 0){
                 sum += fibNum;
             }
             index++;
         }

        log.info("Sum of even numbers: {}", sum);
        return getMethodName();
    }

    private int fibRecursion(int count){
        if(count == 0){
            return 0;
        }else if(count == 1){
            return 1;
        }

        return fibRecursion(count - 2) + fibRecursion(count - 1);
    }



    private String getMethodName(){
        return helper.getMethodName(E_2.class,0);
    }
}
